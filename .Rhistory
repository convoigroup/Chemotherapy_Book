data_jags <- list(X1 = data$X1,
X2 = data$X2,
X_hosp = data$X_hosp,
X_dead = data$X_dead,
T_home = T_home,
T_hosp = T_hosp,
N_recover_home = ifelse(data$N_recover_home > 0,
data$N_recover_home,
1),
N_recover_hosp = ifelse(data$N_recover_hospital > 0,
data$N_recover_hospital,
1),
n = args$n,
n_side_effects = args$n_side_effects,
n_patients = args$n_patients,
logor_side_effects_mu = args$logor_side_effects_mu,
logor_side_effects_sd = args$logor_side_effects_sd,
p_recovery_home_alpha =
betaPar(args$p_recovery_home_mu,
args$p_recovery_home_sd)$alpha,
p_recovery_home_beta =
betaPar(args$p_recovery_home_mu,
args$p_recovery_home_sd)$beta,
p_recovery_hosp_alpha =
betaPar(args$p_recovery_hosp_mu,
args$p_recovery_hosp_sd)$alpha,
p_recovery_hosp_beta =
betaPar(args$p_recovery_hosp_mu,
args$p_recovery_hosp_sd)$beta,
n_died = args$n_died,
n_hospitalised = args$n_hospitalised)
LogOR_addoutcomes_trial <-
"model{
## Models for the data
X1 ~ dbin(p_side_effects_t1, n)
X2 ~ dbin(p_side_effects_t2, n)
X_hosp ~ dbinom(p_hospitalised_total, X1 + X2)
X_dead ~ dbin(p_died, X_hosp)
rate_recover_home <- -log(1 - lambda_home)
rate_recover_hosp <- -log(1 - lambda_hosp)
for(i in 1:N_recover_home){
T_home[i] ~ dexp(rate_recover_home)
}
for(i in 1:N_recover_hosp){
T_hosp[i] ~ dexp(rate_recover_hosp)
}
# Probability of side effects under treatment 1
p_side_effects_t1 ~ dbeta(1 + n_side_effects,
1 + n_patients - n_side_effects)
# Log odds of side effects on treatment 2
logor_side_effects ~ dnorm(logor_side_effects_mu, logor_side_effects_sd)
# Odds of side effects on treatment 1
odds_side_effects_t1 <- p_side_effects_t1 / (1 - p_side_effects_t1)
# Odds for side effects on treatment 2
odds_side_effects_t2 <- odds_side_effects_t1 * exp(logor_side_effects)
# Probability of side effects under treatment 2
p_side_effects_t2    <- odds_side_effects_t2 / (1 + odds_side_effects_t2)
## Variables to define transition probabilities
# Probability that a patient is hospitalised over the time horizon
p_hospitalised_total ~ dbeta(1 + n_hospitalised,
1 + n_side_effects - n_hospitalised)
# Probability that a patient dies over the time horizon given they were
# hospitalised
p_died ~ dbeta(1 + n_died, 1 + n_hospitalised - n_died)
# Lambda_home: Conditional probability that a patient recovers considering
# that they are not hospitalised
lambda_home ~ dbeta(p_recovery_home_alpha, p_recovery_home_beta)
# Lambda_hosp: Conditional probability that a patient recovers considering
# that they do not die
lambda_hosp ~ dbeta(p_recovery_hosp_alpha, p_recovery_hosp_beta)
}
"
filein <- file.path(tempdir(),fileext="datmodel.txt")
cat(trial, file=filein)
# Perform the MCMC simulation with JAGS.
bugs.data <- jags(
data =  data_jags,
parameters.to.save = pars,
model.file = filein,
n.chains = 1,
n.iter = args$n.iter,
n.thin = 1,
n.burnin = 250, progress.bar = "none")
logor_side_effects <- bugs.data$BUGSoutput$sims.matrix[, "logor_side_effects"]
p_hosp_total <- bugs.data$BUGSoutput$sims.matrix[, "p_hospitalised_total"]
p_died <- bugs.data$BUGSoutput$sims.matrix[, "p_died"]
lambda_home <- bugs.data$BUGSoutput$sims.matrix[, "lambda_home"]
lambda_hosp <- bugs.data$BUGSoutput$sims.matrix[, "lambda_hosp"]
return(data.frame(logor_side_effects = logor_side_effects,
p_hospitalised_total= p_hosp_total,
p_died = p_died,
lambda_home = lambda_home,
lambda_hosp = lambda_hosp))
}
# Analysis function based on JAGS
full_analysis_fn <- function(data, args, pars){
## Format Data - Adjust for 0 recovery times
T_home <- NA
if(data$N_recover_home > 0){
T_home <- as.numeric(as.matrix(data[, (1:data$N_recover_home) + 6]))
}
T_hosp <- NA
if(data$N_recover_hospital > 0){
T_hosp <- as.vector(as.matrix(data[,
(6 + 2 * args$n) +
(1:data$N_recover_hospital)]))
}
# Create the data list for JAGS
data_jags <- list(X1 = data$X1,
X2 = data$X2,
X_hosp = data$X_hosp,
X_dead = data$X_dead,
T_home = T_home,
T_hosp = T_hosp,
N_recover_home = ifelse(data$N_recover_home > 0,
data$N_recover_home,
1),
N_recover_hosp = ifelse(data$N_recover_hospital > 0,
data$N_recover_hospital,
1),
n = args$n,
n_side_effects = args$n_side_effects,
n_patients = args$n_patients,
logor_side_effects_mu = args$logor_side_effects_mu,
logor_side_effects_sd = args$logor_side_effects_sd,
p_recovery_home_alpha =
betaPar(args$p_recovery_home_mu,
args$p_recovery_home_sd)$alpha,
p_recovery_home_beta =
betaPar(args$p_recovery_home_mu,
args$p_recovery_home_sd)$beta,
p_recovery_hosp_alpha =
betaPar(args$p_recovery_hosp_mu,
args$p_recovery_hosp_sd)$alpha,
p_recovery_hosp_beta =
betaPar(args$p_recovery_hosp_mu,
args$p_recovery_hosp_sd)$beta,
n_died = args$n_died,
n_hospitalised = args$n_hospitalised)
LogOR_addoutcomes_trial <-
"model{
## Models for the data
X1 ~ dbin(p_side_effects_t1, n)
X2 ~ dbin(p_side_effects_t2, n)
X_hosp ~ dbinom(p_hospitalised_total, X1 + X2)
X_dead ~ dbin(p_died, X_hosp)
rate_recover_home <- -log(1 - lambda_home)
rate_recover_hosp <- -log(1 - lambda_hosp)
for(i in 1:N_recover_home){
T_home[i] ~ dexp(rate_recover_home)
}
for(i in 1:N_recover_hosp){
T_hosp[i] ~ dexp(rate_recover_hosp)
}
# Probability of side effects under treatment 1
p_side_effects_t1 ~ dbeta(1 + n_side_effects,
1 + n_patients - n_side_effects)
# Log odds of side effects on treatment 2
logor_side_effects ~ dnorm(logor_side_effects_mu, logor_side_effects_sd)
# Odds of side effects on treatment 1
odds_side_effects_t1 <- p_side_effects_t1 / (1 - p_side_effects_t1)
# Odds for side effects on treatment 2
odds_side_effects_t2 <- odds_side_effects_t1 * exp(logor_side_effects)
# Probability of side effects under treatment 2
p_side_effects_t2    <- odds_side_effects_t2 / (1 + odds_side_effects_t2)
## Variables to define transition probabilities
# Probability that a patient is hospitalised over the time horizon
p_hospitalised_total ~ dbeta(1 + n_hospitalised,
1 + n_side_effects - n_hospitalised)
# Probability that a patient dies over the time horizon given they were
# hospitalised
p_died ~ dbeta(1 + n_died, 1 + n_hospitalised - n_died)
# Lambda_home: Conditional probability that a patient recovers considering
# that they are not hospitalised
lambda_home ~ dbeta(p_recovery_home_alpha, p_recovery_home_beta)
# Lambda_hosp: Conditional probability that a patient recovers considering
# that they do not die
lambda_hosp ~ dbeta(p_recovery_hosp_alpha, p_recovery_hosp_beta)
}
"
filein <- file.path(tempdir(),fileext="datmodel.txt")
cat(trial, file=filein)
# Perform the MCMC simulation with JAGS.
bugs.data <- jags(
data =  data_jags,
parameters.to.save = pars,
model.file = filein,
n.chains = 1,
n.iter = args$n.iter,
n.thin = 1,
n.burnin = 250, progress.bar = "none")
logor_side_effects <- bugs.data$BUGSoutput$sims.matrix[, "logor_side_effects"]
p_hosp_total <- bugs.data$BUGSoutput$sims.matrix[, "p_hospitalised_total"]
p_died <- bugs.data$BUGSoutput$sims.matrix[, "p_died"]
lambda_home <- bugs.data$BUGSoutput$sims.matrix[, "lambda_home"]
lambda_hosp <- bugs.data$BUGSoutput$sims.matrix[, "lambda_hosp"]
return(data.frame(logor_side_effects = logor_side_effects,
p_hospitalised_total= p_hosp_total,
p_died = p_died,
lambda_home = lambda_home,
lambda_hosp = lambda_hosp))
}
# EVSI calculation using the momemt matching method.
evsi_OR_allout_MM <- evsi(outputs = chemotherapy_output,
inputs = m_params,
pars = c("logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
pars_datagen = c("p_side_effects_t1",
"logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
n = seq(50, 1500, by = 50),
method = "mm",
datagen_fn = full_datagen_fn,
model_fn = calculate_costs_effects,
analysis_args = list(n_side_effects = n_side_effects,
n_patients = n_patients,
n = 50,
logor_side_effects_mu = logor_side_effects_mu,
logor_side_effects_sd = logor_side_effects_sd,
betaPar = betaPar,
p_recovery_home_mu = p_recovery_home_mu,
p_recovery_home_sd = p_recovery_home_sd,
p_recovery_hosp_mu = p_recovery_hosp_mu,
p_recovery_hosp_sd = p_recovery_hosp_sd,
n.iter = 5250,
n_died = n_died,
n_hospitalised = n_hospitalised,
p_side_effects_t1 = m_params$p_side_effects_t1),
analysis_fn = full_analysis_fn,
par_fn = generate_psa_parameters,
npreg_method = "earth")
# Analysis function based on JAGS
full_analysis_fn <- function(data, args, pars){
## Format Data - Adjust for 0 recovery times
T_home <- NA
if(data$N_recover_home > 0){
T_home <- as.numeric(as.matrix(data[, (1:data$N_recover_home) + 6]))
}
T_hosp <- NA
if(data$N_recover_hospital > 0){
T_hosp <- as.vector(as.matrix(data[,
(6 + 2 * args$n) +
(1:data$N_recover_hospital)]))
}
# Create the data list for JAGS
data_jags <- list(X1 = data$X1,
X2 = data$X2,
X_hosp = data$X_hosp,
X_dead = data$X_dead,
T_home = T_home,
T_hosp = T_hosp,
N_recover_home = ifelse(data$N_recover_home > 0,
data$N_recover_home,
1),
N_recover_hosp = ifelse(data$N_recover_hospital > 0,
data$N_recover_hospital,
1),
n = args$n,
n_side_effects = args$n_side_effects,
n_patients = args$n_patients,
logor_side_effects_mu = args$logor_side_effects_mu,
logor_side_effects_sd = args$logor_side_effects_sd,
p_recovery_home_alpha =
betaPar(args$p_recovery_home_mu,
args$p_recovery_home_sd)$alpha,
p_recovery_home_beta =
betaPar(args$p_recovery_home_mu,
args$p_recovery_home_sd)$beta,
p_recovery_hosp_alpha =
betaPar(args$p_recovery_hosp_mu,
args$p_recovery_hosp_sd)$alpha,
p_recovery_hosp_beta =
betaPar(args$p_recovery_hosp_mu,
args$p_recovery_hosp_sd)$beta,
n_died = args$n_died,
n_hospitalised = args$n_hospitalised)
LogOR_addoutcomes_trial <-
"model{
## Models for the data
X1 ~ dbin(p_side_effects_t1, n)
X2 ~ dbin(p_side_effects_t2, n)
X_hosp ~ dbinom(p_hospitalised_total, X1 + X2)
X_dead ~ dbin(p_died, X_hosp)
rate_recover_home <- -log(1 - lambda_home)
rate_recover_hosp <- -log(1 - lambda_hosp)
for(i in 1:N_recover_home){
T_home[i] ~ dexp(rate_recover_home)
}
for(i in 1:N_recover_hosp){
T_hosp[i] ~ dexp(rate_recover_hosp)
}
# Probability of side effects under treatment 1
p_side_effects_t1 ~ dbeta(1 + n_side_effects,
1 + n_patients - n_side_effects)
# Log odds of side effects on treatment 2
logor_side_effects ~ dnorm(logor_side_effects_mu, logor_side_effects_sd)
# Odds of side effects on treatment 1
odds_side_effects_t1 <- p_side_effects_t1 / (1 - p_side_effects_t1)
# Odds for side effects on treatment 2
odds_side_effects_t2 <- odds_side_effects_t1 * exp(logor_side_effects)
# Probability of side effects under treatment 2
p_side_effects_t2    <- odds_side_effects_t2 / (1 + odds_side_effects_t2)
## Variables to define transition probabilities
# Probability that a patient is hospitalised over the time horizon
p_hospitalised_total ~ dbeta(1 + n_hospitalised,
1 + n_side_effects - n_hospitalised)
# Probability that a patient dies over the time horizon given they were
# hospitalised
p_died ~ dbeta(1 + n_died, 1 + n_hospitalised - n_died)
# Lambda_home: Conditional probability that a patient recovers considering
# that they are not hospitalised
lambda_home ~ dbeta(p_recovery_home_alpha, p_recovery_home_beta)
# Lambda_hosp: Conditional probability that a patient recovers considering
# that they do not die
lambda_hosp ~ dbeta(p_recovery_hosp_alpha, p_recovery_hosp_beta)
}
"
filein <- file.path(tempdir(),fileext="datmodel.txt")
cat(LogOR_addoutcomes_trial, file=filein)
# Perform the MCMC simulation with JAGS.
bugs.data <- jags(
data =  data_jags,
parameters.to.save = pars,
model.file = filein,
n.chains = 1,
n.iter = args$n.iter,
n.thin = 1,
n.burnin = 250, progress.bar = "none")
logor_side_effects <- bugs.data$BUGSoutput$sims.matrix[, "logor_side_effects"]
p_hosp_total <- bugs.data$BUGSoutput$sims.matrix[, "p_hospitalised_total"]
p_died <- bugs.data$BUGSoutput$sims.matrix[, "p_died"]
lambda_home <- bugs.data$BUGSoutput$sims.matrix[, "lambda_home"]
lambda_hosp <- bugs.data$BUGSoutput$sims.matrix[, "lambda_hosp"]
return(data.frame(logor_side_effects = logor_side_effects,
p_hospitalised_total= p_hosp_total,
p_died = p_died,
lambda_home = lambda_home,
lambda_hosp = lambda_hosp))
}
# EVSI calculation using the momemt matching method.
evsi_OR_allout_MM <- evsi(outputs = chemotherapy_output,
inputs = m_params,
pars = c("logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
pars_datagen = c("p_side_effects_t1",
"logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
n = seq(50, 1500, by = 50),
method = "mm",
datagen_fn = full_datagen_fn,
model_fn = calculate_costs_effects,
analysis_args = list(n_side_effects = n_side_effects,
n_patients = n_patients,
n = 50,
logor_side_effects_mu = logor_side_effects_mu,
logor_side_effects_sd = logor_side_effects_sd,
betaPar = betaPar,
p_recovery_home_mu = p_recovery_home_mu,
p_recovery_home_sd = p_recovery_home_sd,
p_recovery_hosp_mu = p_recovery_hosp_mu,
p_recovery_hosp_sd = p_recovery_hosp_sd,
n.iter = 5250,
n_died = n_died,
n_hospitalised = n_hospitalised,
p_side_effects_t1 = m_params$p_side_effects_t1),
analysis_fn = full_analysis_fn,
par_fn = generate_psa_parameters,
npreg_method = "earth")
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
plotting_4 <- evsi.plot.adapt(chemotherapy_output, m_params, c("logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
evsi_OR_allout_MM, "earth")
# EVSI calculation using the momemt matching method.
evsi_OR_allout_MM <- evsi(outputs = chemotherapy_output,
inputs = m_params,
pars = c("logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
pars_datagen = c("p_side_effects_t1",
"logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
n = seq(50, 1500, by = 50),
method = "mm",
datagen_fn = full_datagen_fn,
model_fn = calculate_costs_effects,
analysis_args = list(n_side_effects = n_side_effects,
n_patients = n_patients,
n = 50,
logor_side_effects_mu = logor_side_effects_mu,
logor_side_effects_sd = logor_side_effects_sd,
betaPar = betaPar,
p_recovery_home_mu = p_recovery_home_mu,
p_recovery_home_sd = p_recovery_home_sd,
p_recovery_hosp_mu = p_recovery_hosp_mu,
p_recovery_hosp_sd = p_recovery_hosp_sd,
n.iter = 5250,
n_died = n_died,
n_hospitalised = n_hospitalised,
p_side_effects_t1 = m_params$p_side_effects_t1),
analysis_fn = full_analysis_fn,
par_fn = generate_psa_parameters,
npreg_method = "earth")
plotting_4 <- evsi.plot.adapt(chemotherapy_output, m_params, c("logor_side_effects",
"p_hospitalised_total", "p_died",
"lambda_home", "lambda_hosp"),
evsi_OR_allout_MM, "earth")
pop.adjust <- 46000 * (1 / (1 + 0.035)^3)
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
pdf("06_figs/ENBS_SEFU_MM.pdf")
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
dev.off()
optim.ss(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
pdf("06_figs/COSS_SEFU_MM.pdf")
coss(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
Pop = pop.adjust, Time = 7)
dev.off()
pdf("06_figs/prob_SEFU_MM.pdf")
evsi.prob.plot(plotting_4, setup = c(1260000, 1400000), pp = 2 * c(1560.55, 1600), k = 20000,
N = 1020, Pop = c(0,60000), Time = c(0,15))
dev.off()
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
pdf("06_figs/ENBS_SEFU_MM.pdf")
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
points(plotting_3$attrib$N, plotting_3$evsi$`20000`, type = "l")
dev.off()
evsi.enbs.plot
debug(evsi.enbs.plot)
evsi.enbs.plot(plotting_3, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
ENBS.mat
ENBS_RB <- vector()
i <- 1
for(n in plotting_4$attrib$N){
ENBS_RB[i] <- ENBS.fun(plotting_3$evsi$`20000`, pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)), mean(2 * c(1560.55, 1600) * n))
i <- i + 1
}
ENBS_RB <- vector()
i <- 1
for(n in plotting_4$attrib$N){
ENBS_RB[i] <- ENBS.fun(plotting_3$evsi$`20000`, pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)) + mean(2 * c(1560.55, 1600) * n))
i <- i + 1
}
warnings()
ENBS.fun(plotting_3$evsi$`20000`, pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)) + mean(2 * c(1560.55, 1600) * n))
plotting_3$evsi$`20000`
ENBS_RB <- vector()
i <- 1
for(n in plotting_4$attrib$N){
ENBS_RB[i] <- ENBS.fun(plotting_3$evsi$`20000`[i], pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)) + mean(2 * c(1560.55, 1600) * n))
i <- i + 1
}
ENBS_RB
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
undebug(evsi.enbs.plot)
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
points(ENBS_RB, plotting_3$attrib$N, type = "l")
pdf("06_figs/ENBS_SEFU_MM.pdf")
pdf("06_figs/ENBS_SEFU_MM.pdf")
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
ENBS_RB <- vector()
i <- 1
for(n in plotting_4$attrib$N){
ENBS_RB[i] <- ENBS.fun(plotting_3$evsi$`20000`[i], pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)) + mean(2 * c(1560.55, 1600) * n))
i <- i + 1
}
points(ENBS_RB, plotting_3$attrib$N, type = "l")
dev.off()
ENBS_RB
pdf("06_figs/ENBS_SEFU_MM.pdf")
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
ENBS_RB <- vector()
i <- 1
for(n in plotting_4$attrib$N){
ENBS_RB[i] <- ENBS.fun(plotting_3$evsi$`20000`[i], pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)) + mean(2 * c(1560.55, 1600) * n))
i <- i + 1
}
points(plotting_3$attrib$N, ENBS_RB, type = "l")
dev.off()
pdf("06_figs/ENBS_SEFU_MM.pdf")
evsi.enbs.plot(plotting_4, c(1260000, 1400000), 2 * c(1560.55, 1600),
k = 20000, Pop = pop.adjust, Time = 7)
ENBS_RB <- vector()
i <- 1
for(n in plotting_4$attrib$N){
ENBS_RB[i] <- ENBS.fun(plotting_3$evsi$`20000`[i], pop.adjust, 7, 0.035,
mean(c(1260000, 1400000)) + mean(2 * c(1560.55, 1600) * n))
i <- i + 1
}
points(plotting_3$attrib$N, ENBS_RB, type = "l")
dev.off()
