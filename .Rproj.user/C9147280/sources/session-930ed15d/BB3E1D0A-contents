utility_datagen_fn <- function(inputs, n = 20, 
                               sd_hospital_fun = function(){return(runif(1, 0.00001, 0.4))}
){
  # Load the data
  X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
  X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", dim(inputs)[1])
  for(i in 1:dim(inputs)[1]){
    set.seed(123 + i)
    m_hospital <- inputs[i, "u_hospital"]
    sd_hospital <- sd_hospital_fun()
    
    # Simulate the utility 
    X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
                                             a = -Inf, b = 1)
  }
  
  data_save_dat <- data.frame(cbind(X_hospital = X_hospital))
  return(data_save_dat)
}

utility_datagen_fn_rb <- function(inputs, n = 500,
                                  sd_hospital_fun = function(){return(runif(1, 0.00001, 0.4))}
){
  # Calculate geometric mean
  gm_mean = function(x, na.rm=TRUE){
    exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
  }
  
  # Load the data
  X_hospital <- matrix(NA, nrow = dim(inputs)[1], ncol = n[1])
  X_hospital_mean1 <- X_hospital_mean2 <- vector("numeric", length = dim(inputs)[1])
  for(i in 1:dim(inputs)[1]){
    set.seed(123 + i)
    m_hospital <- inputs[i, "u_hospital"]
    sd_hospital <- sd_hospital_fun()
    # Simulate the costs 
    X_hospital[i, ] <- truncnorm::rtruncnorm(n[1], mean = m_hospital, sd = sd_hospital,
                                             a = -Inf, b = 1)
    X_hospital_mean1[i] <- gm_mean(X_hospital[i, ])
    X_hospital_mean2[i] <- gm_mean(1 - X_hospital[i, ])
  }
  
  data_save_dat <- data.frame(cbind(X_hospital_mean1 = X_hospital_mean1,
                                    X_hospital_mean2 = X_hospital_mean2))
  return(data_save_dat)
}


# Analysis function based on JAGS
utility_analysis_fn <- function(data, args, pars){
  # Create the data list for JAGS
  data_jags <- list(X_recovery = as.vector(as.matrix(data[, (1:args$n)])),
                    X_home_care = as.vector(as.matrix(data[, args$n + (1:args$n)])),
                    X_hospital = as.vector(as.matrix(data[, 2*args$n + (1:args$n)])),
                    n = args$n,
                    alpha_recovery = args$betaPar(
                      args$u_recovery_mu,
                      args$u_recovery_sd
                    )$alpha,
                    beta_recovery = args$betaPar(
                      args$u_recovery_mu,
                      args$u_recovery_sd
                    )$beta,
                    alpha_home_care = args$betaPar(
                      args$u_home_care_mu,
                      args$u_home_care_sd
                    )$alpha,
                    beta_home_care = args$betaPar(
                      args$u_home_care_mu,
                      args$u_home_care_sd
                    )$beta,
                    alpha_hospital = args$betaPar(
                      args$u_hospital_mu,
                      args$u_hospital_sd
                    )$alpha,
                    beta_hospital = args$betaPar(
                      args$u_hospital_mu,
                      args$u_hospital_sd
                    )$beta)
  
  trial <- function(){
    for(i in 1:n){
      X_recovery[i] ~ dnorm(u_recovery, tau_recovery);T(, 1.00001)
      X_home_care[i] ~ dnorm(u_home_care, tau_home_care);T(, 1.00001)
      X_hospital[i] ~ dnorm(u_hospital, tau_hospital);T(, 1.00001)
    }
    
    u_recovery ~ dbeta(alpha_recovery, beta_recovery)
    u_home_care ~ dbeta(alpha_home_care, beta_home_care)
    u_hospital ~ dbeta(alpha_hospital, beta_hospital)
    
    sd_recovery ~ dunif(0.000001, 0.15)
    sd_home_care ~ dunif(0.00001, 0.6)
    sd_hospital ~ dunif(0.00001, 0.4)
    
    tau_recovery <- 1 / sd_recovery ^ 2
    tau_home_care <- 1 / sd_home_care ^ 2
    tau_hospital <- 1 / sd_hospital ^ 2
  }
  
  filein <- file.path(tempdir(),fileext="datmodel.txt")
  R2OpenBUGS::write.model(trial,filein)
  
  # Perform the MCMC simulation with OpenBUGS.
  # Close OpenBUGS once it has finished (if debug is set to TRUE)
  bugs.data <- jags(
    data =  data_jags,
    parameters.to.save = pars,
    model.file = filein, 
    n.chains = 1, 
    n.iter = args$n.iter, 
    n.thin = 1, 
    n.burnin = 250, progress.bar = "none") 
  
  return(data.frame(u_recovery = bugs.data$BUGSoutput$sims.matrix[, "u_recovery"],
                    u_home_care = bugs.data$BUGSoutput$sims.matrix[, "u_home_care"],
                    u_hospital = bugs.data$BUGSoutput$sims.matrix[, "u_hospital"]))
}